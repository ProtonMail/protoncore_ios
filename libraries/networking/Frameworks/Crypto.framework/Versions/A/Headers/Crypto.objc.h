// Objective-C API for talking to github.com/ProtonMail/gopenpgp/crypto Go package.
//   gobind -lang=objc github.com/ProtonMail/gopenpgp/crypto
//
// File is generated by gobind. Do not edit.

#ifndef __Crypto_H__
#define __Crypto_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Armor.objc.h"
#include "Constants.objc.h"

@class CryptoAttachmentProcessor;
@class CryptoClearTextMessage;
@class CryptoGopenPGP;
@class CryptoIdentity;
@class CryptoKeyRing;
@class CryptoPGPMessage;
@class CryptoPGPSignature;
@class CryptoPGPSplitMessage;
@class CryptoPlainMessage;
@class CryptoSignatureCollector;
@class CryptoSignatureVerificationError;
@class CryptoSymmetricKey;
@protocol CryptoMIMECallbacks;
@class CryptoMIMECallbacks;

@protocol CryptoMIMECallbacks <NSObject>
- (void)onAttachment:(NSString* _Nullable)headers data:(NSData* _Nullable)data;
- (void)onBody:(NSString* _Nullable)body mimetype:(NSString* _Nullable)mimetype;
- (void)onEncryptedHeaders:(NSString* _Nullable)headers;
- (void)onError:(NSError* _Nullable)err;
- (void)onVerified:(long)verified;
@end

/**
 * AttachmentProcessor keeps track of the progress of encrypting an attachment
(optimized for encrypting large files).
 */
@interface CryptoAttachmentProcessor : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Finish closes the attachment and returns the encrypted data
 */
- (CryptoPGPSplitMessage* _Nullable)finish:(NSError* _Nullable* _Nullable)error;
/**
 * Process writes attachment data to be encrypted
 */
- (void)process:(NSData* _Nullable)plainData;
@end

/**
 * ClearTextMessage, split signed clear text message container.
A Cleartext message is a signed PGP message, that is not encrypted,
i.e. the ones beginning with -----BEGIN PGP SIGNED MESSAGE-----
 */
@interface CryptoClearTextMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClearTextMessage generates a new ClearTextMessage from data and signature
 */
- (nullable instancetype)init:(NSData* _Nullable)data signature:(NSData* _Nullable)signature;
/**
 * NewClearTextMessageFromArmored returns the message body and unarmored signature from a clearsigned message.
 */
- (nullable instancetype)initFromArmored:(NSString* _Nullable)signedMessage;
@property (nonatomic) NSData* _Nullable data;
@property (nonatomic) NSData* _Nullable signature;
/**
 * GetArmored armors plaintext and signature with the PGP SIGNED MESSAGE armoring
 */
- (NSString* _Nonnull)getArmored:(NSError* _Nullable* _Nullable)error;
/**
 * GetBinary returns the unarmored signed data as a []byte
 */
- (NSData* _Nullable)getBinary;
/**
 * GetBinarySignature returns the unarmored binary signature as a []byte
 */
- (NSData* _Nullable)getBinarySignature;
/**
 * GetString returns the unarmored signed data as a string
 */
- (NSString* _Nonnull)getString;
@end

/**
 * GopenPGP is used as a "namespace" for many of the functions in this package.
It is a struct that keeps track of time skew between server and client.
 */
@interface CryptoGopenPGP : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * BuildKeyRing reads keyring from binary data
 */
- (CryptoKeyRing* _Nullable)buildKeyRing:(NSData* _Nullable)binKeys error:(NSError* _Nullable* _Nullable)error;
/**
 * BuildKeyRingArmored reads armored string and returns keyring
 */
- (CryptoKeyRing* _Nullable)buildKeyRingArmored:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * BuildKeyRingNoError does not return error on fail
 */
- (CryptoKeyRing* _Nullable)buildKeyRingNoError:(NSData* _Nullable)binKeys;
/**
 * GenerateKey generates a key of the given keyType ("rsa" or "x25519").
If keyType is "rsa", bits is the RSA bitsize of the key.
If keyType is "x25519" bits is unused.
 */
- (NSString* _Nonnull)generateKey:(NSString* _Nullable)name email:(NSString* _Nullable)email passphrase:(NSString* _Nullable)passphrase keyType:(NSString* _Nullable)keyType bits:(long)bits error:(NSError* _Nullable* _Nullable)error;
/**
 * GenerateRSAKeyWithPrimes generates a RSA key using the given primes.
 */
- (NSString* _Nonnull)generateRSAKeyWithPrimes:(NSString* _Nullable)name email:(NSString* _Nullable)email passphrase:(NSString* _Nullable)passphrase bits:(long)bits primeone:(NSData* _Nullable)primeone primetwo:(NSData* _Nullable)primetwo primethree:(NSData* _Nullable)primethree primefour:(NSData* _Nullable)primefour error:(NSError* _Nullable* _Nullable)error;
// skipped method GopenPGP.GetTime with unsupported parameter or return types

/**
 * GetUnixTime gets latest cached time
 */
- (int64_t)getUnixTime;
/**
 * IsArmoredKeyExpired checks whether the given armored key is expired.
 */
- (BOOL)isArmoredKeyExpired:(NSString* _Nullable)publicKey ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * IsKeyExpired checks whether the given (unarmored, binary) key is expired.
 */
- (BOOL)isKeyExpired:(NSData* _Nullable)publicKey ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * IsPGPMessage checks if data if has armored PGP message format.
 */
- (BOOL)isPGPMessage:(NSString* _Nullable)data;
/**
 * PrintFingerprints is a debug helper function that prints the key and subkey fingerprints.
 */
- (NSString* _Nonnull)printFingerprints:(NSString* _Nullable)pubKey error:(NSError* _Nullable* _Nullable)error;
/**
 * RandomToken generated a random token of the same size of the keysize of the default cipher.
 */
- (NSData* _Nullable)randomToken:(NSError* _Nullable* _Nullable)error;
/**
 * RandomTokenSize generates a random token with the specified key size
 */
- (NSData* _Nullable)randomTokenSize:(long)size error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdatePrivateKeyPassphrase decrypts the given armored privateKey with oldPassphrase,
re-encrypts it with newPassphrase, and returns the new armored key.
 */
- (NSString* _Nonnull)updatePrivateKeyPassphrase:(NSString* _Nullable)privateKey oldPassphrase:(NSString* _Nullable)oldPassphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateTime updates cached time
 */
- (void)updateTime:(int64_t)newTime;
@end

/**
 * Identity contains the name and the email of a key holder.
 */
@interface CryptoIdentity : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull email;
@end

/**
 * KeyRing contains multiple private and public keys.
 */
@interface CryptoKeyRing : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * FirstKeyID as obtained from API to match salt
 */
@property (nonatomic) NSString* _Nonnull firstKeyID;
/**
 * CheckPassphrase checks if private key passphrase is correct for every sub key.
 */
- (BOOL)checkPassphrase:(NSString* _Nullable)passphrase;
/**
 * Decrypt decrypts encrypted string using pgp keys, returning a PlainMessage
* message    : The encrypted input as a PGPMessage
* verifyKey  : Public key for signature verification (optional)
* verifyTime : Time at verification (necessary only if verifyKey is not nil)

When verifyKey is not provided, then verifyTime should be zero, and signature verification will be ignored
 */
- (CryptoPlainMessage* _Nullable)decrypt:(CryptoPGPMessage* _Nullable)message verifyKey:(CryptoKeyRing* _Nullable)verifyKey verifyTime:(int64_t)verifyTime error:(NSError* _Nullable* _Nullable)error;
- (CryptoPlainMessage* _Nullable)decryptAttachment:(CryptoPGPSplitMessage* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * DecryptMIMEMessage decrypts a MIME message.
 */
- (void)decryptMIMEMessage:(CryptoPGPMessage* _Nullable)message verifyKey:(CryptoKeyRing* _Nullable)verifyKey callbacks:(id<CryptoMIMECallbacks> _Nullable)callbacks verifyTime:(int64_t)verifyTime;
/**
 * DecryptSessionKey returns the decrypted session key from a binary encrypted session key packet.
 */
- (CryptoSymmetricKey* _Nullable)decryptSessionKey:(NSData* _Nullable)keyPacket error:(NSError* _Nullable* _Nullable)error;
/**
 * Encrypt encrypts a PlainMessage, outputs a PGPMessage.
If an unlocked private key is also provided it will also sign the message.
* message    : The plaintext input as a PlainMessage
* privateKey : (optional) an unlocked private keyring to include signature in the message
 */
- (CryptoPGPMessage* _Nullable)encrypt:(CryptoPlainMessage* _Nullable)message privateKey:(CryptoKeyRing* _Nullable)privateKey error:(NSError* _Nullable* _Nullable)error;
- (CryptoPGPSplitMessage* _Nullable)encryptAttachment:(CryptoPlainMessage* _Nullable)message fileName:(NSString* _Nullable)fileName error:(NSError* _Nullable* _Nullable)error;
/**
 * EncryptSessionKey encrypts the session key with the unarmored
publicKey and returns a binary public-key encrypted session key packet.
 */
- (NSData* _Nullable)encryptSessionKey:(CryptoSymmetricKey* _Nullable)sessionSplit error:(NSError* _Nullable* _Nullable)error;
/**
 * FirstKey returns a KeyRing with only the first key of the original one
 */
- (CryptoKeyRing* _Nullable)firstKey;
/**
 * GetArmoredPublicKey returns the armored public keys from this keyring.
 */
- (NSString* _Nonnull)getArmoredPublicKey:(NSError* _Nullable* _Nullable)error;
// skipped method KeyRing.GetEntities with unsupported parameter or return types

/**
 * GetFingerprint gets the fingerprint from the keyring.
 */
- (NSString* _Nonnull)getFingerprint:(NSError* _Nullable* _Nullable)error;
/**
 * GetPublicKey returns the unarmored public keys from this keyring.
 */
- (NSData* _Nullable)getPublicKey:(NSError* _Nullable* _Nullable)error;
// skipped method KeyRing.GetSigningEntity with unsupported parameter or return types

// skipped method KeyRing.Identities with unsupported parameter or return types

// skipped method KeyRing.KeyIds with unsupported parameter or return types

- (CryptoAttachmentProcessor* _Nullable)newLowMemoryAttachmentProcessor:(long)estimatedSize fileName:(NSString* _Nullable)fileName error:(NSError* _Nullable* _Nullable)error;
// skipped method KeyRing.ReadFrom with unsupported parameter or return types

/**
 * SignDetached generates and returns a PGPSignature for a given PlainMessage
 */
- (CryptoPGPSignature* _Nullable)signDetached:(CryptoPlainMessage* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * Unlock tries to unlock as many keys as possible with the following password. Note
that keyrings can contain keys locked with different passwords, and thus
err == nil does not mean that all keys have been successfully decrypted.
If err != nil, the password is wrong for every key, and err is the last error
encountered.
 */
- (BOOL)unlock:(NSData* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * UnlockWithPassphrase is a wrapper for Unlock that uses strings
 */
- (BOOL)unlockWithPassphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * VerifyDetached verifies a PlainMessage with embedded a PGPSignature
and returns a SignatureVerificationError if fails
 */
- (BOOL)verifyDetached:(CryptoPlainMessage* _Nullable)message signature:(CryptoPGPSignature* _Nullable)signature verifyTime:(int64_t)verifyTime error:(NSError* _Nullable* _Nullable)error;
// skipped method KeyRing.WriteArmoredPublicKey with unsupported parameter or return types

// skipped method KeyRing.WritePublicKey with unsupported parameter or return types

@end

/**
 * PGPMessage stores a PGP-encrypted message.
 */
@interface CryptoPGPMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPGPMessage generates a new PGPMessage from the unarmored binary data.
 */
- (nullable instancetype)init:(NSData* _Nullable)data;
/**
 * NewPGPMessageFromArmored generates a new PGPMessage from an armored string ready for decryption.
 */
- (nullable instancetype)initFromArmored:(NSString* _Nullable)armored;
/**
 * The content of the message
 */
@property (nonatomic) NSData* _Nullable data;
/**
 * GetArmored returns the armored message as a string
 */
- (NSString* _Nonnull)getArmored:(NSError* _Nullable* _Nullable)error;
/**
 * GetBinary returns the unarmored binary content of the message as a []byte
 */
- (NSData* _Nullable)getBinary;
// skipped method PGPMessage.NewReader with unsupported parameter or return types

/**
 * SeparateKeyAndData returns the first keypacket and the (hopefully unique) dataPacket (not verified)
* estimatedLength is the estimate length of the message
* garbageCollector > 0 activates the garbage collector
 */
- (CryptoPGPSplitMessage* _Nullable)separateKeyAndData:(long)estimatedLength garbageCollector:(long)garbageCollector error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PGPSignature stores a PGP-encoded detached signature.
 */
@interface CryptoPGPSignature : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPGPSignature generates a new PGPSignature from the unarmored binary data.
 */
- (nullable instancetype)init:(NSData* _Nullable)data;
/**
 * NewPGPSignatureFromArmored generates a new PGPSignature from the armored string ready for verification.
 */
- (nullable instancetype)initFromArmored:(NSString* _Nullable)armored;
/**
 * The content of the signature
 */
@property (nonatomic) NSData* _Nullable data;
/**
 * GetArmored returns the armored signature as a string
 */
- (NSString* _Nonnull)getArmored:(NSError* _Nullable* _Nullable)error;
/**
 * GetBinary returns the unarmored binary content of the signature as a []byte
 */
- (NSData* _Nullable)getBinary;
@end

/**
 * PGPSplitMessage contains a separate session key packet and symmetrically
encrypted data packet.
 */
@interface CryptoPGPSplitMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPGPSplitMessage generates a new PGPSplitMessage from the binary unarmored keypacket,
datapacket, and encryption algorithm.
 */
- (nullable instancetype)init:(NSData* _Nullable)keyPacket dataPacket:(NSData* _Nullable)dataPacket;
/**
 * NewPGPSplitMessageFromArmored generates a new PGPSplitMessage by splitting an armored message into its
session key packet and symmetrically encrypted data packet.
 */
- (nullable instancetype)initFromArmored:(NSString* _Nullable)encrypted;
@property (nonatomic) NSData* _Nullable dataPacket;
@property (nonatomic) NSData* _Nullable keyPacket;
/**
 * GetArmored returns the armored message as a string, with joined data and key packets
 */
- (NSString* _Nonnull)getArmored:(NSError* _Nullable* _Nullable)error;
/**
 * GetBinary returns the unarmored binary joined packets as a []byte
 */
- (NSData* _Nullable)getBinary;
/**
 * GetBinaryDataPacket returns the unarmored binary datapacket as a []byte
 */
- (NSData* _Nullable)getBinaryDataPacket;
/**
 * GetBinaryKeyPacket returns the unarmored binary keypacket as a []byte
 */
- (NSData* _Nullable)getBinaryKeyPacket;
@end

/**
 * PlainMessage stores a plain text / unencrypted message.
 */
@interface CryptoPlainMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPlainMessage generates a new binary PlainMessage ready for encryption,
signature, or verification from the unencrypted binary data.
 */
- (nullable instancetype)init:(NSData* _Nullable)data;
/**
 * NewPlainMessageFromString generates a new text PlainMessage,
ready for encryption, signature, or verification from an unencrypted string.
 */
- (nullable instancetype)initFromString:(NSString* _Nullable)text;
/**
 * The content of the message
 */
@property (nonatomic) NSData* _Nullable data;
/**
 * if the content is text or binary
 */
@property (nonatomic) BOOL textType;
/**
 * GetBase64 returns the base-64 encoded binary content of the message as a string
 */
- (NSString* _Nonnull)getBase64;
/**
 * GetBinary returns the binary content of the message as a []byte
 */
- (NSData* _Nullable)getBinary;
/**
 * GetString returns the content of the message as a string
 */
- (NSString* _Nonnull)getString;
/**
 * IsBinary returns whether the message is a binary message
 */
- (BOOL)isBinary;
/**
 * IsText returns whether the message is a text message
 */
- (BOOL)isText;
// skipped method PlainMessage.NewReader with unsupported parameter or return types

@end

/**
 * SignatureCollector structure
 */
@interface CryptoSignatureCollector : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method SignatureCollector.Accept with unsupported parameter or return types

/**
 * GetSignature collected by Accept
 */
- (NSString* _Nonnull)getSignature;
@end

/**
 * SignatureVerificationError is returned from Decrypt and VerifyDetached functions when signature verification fails
 */
@interface CryptoSignatureVerificationError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long status;
@property (nonatomic) NSString* _Nonnull message;
/**
 * Error is the base method for all errors
 */
- (NSString* _Nonnull)error;
@end

/**
 * SymmetricKey stores a decrypted session key.
 */
@interface CryptoSymmetricKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSymmetricKeyFromKeyPacket decrypts the binary symmetrically encrypted
session key packet and returns the session key.
 */
- (nullable instancetype)initFromKeyPacket:(NSData* _Nullable)keyPacket password:(NSString* _Nullable)password;
- (nullable instancetype)initFromToken:(NSString* _Nullable)passphrase algo:(NSString* _Nullable)algo;
/**
 * The decrypted binary session key.
 */
@property (nonatomic) NSData* _Nullable key;
/**
 * The symmetric encryption algorithm used with this key.
 */
@property (nonatomic) NSString* _Nonnull algo;
/**
 * Decrypt decrypts password protected pgp binary messages
* encrypted: PGPMessage
* output: PlainMessage
 */
- (CryptoPlainMessage* _Nullable)decrypt:(CryptoPGPMessage* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * Encrypt encrypts a PlainMessage to PGPMessage with a SymmetricKey
* message : The plain data as a PlainMessage
* output  : The encrypted data as PGPMessage
 */
- (CryptoPGPMessage* _Nullable)encrypt:(CryptoPlainMessage* _Nullable)message error:(NSError* _Nullable* _Nullable)error;
/**
 * EncryptToKeyPacket encrypts the session key with the password and
returns a binary symmetrically encrypted session key packet.
 */
- (NSData* _Nullable)encryptToKeyPacket:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBase64Key returns the session key as base64 encoded string.
 */
- (NSString* _Nonnull)getBase64Key;
// skipped method SymmetricKey.GetCipherFunc with unsupported parameter or return types

@end

/**
 * CreateSymmetricKey this name should be NewSymmetricKeyFromKey.
to use Create to avoid function name conflicts with gomobile android target
 */
FOUNDATION_EXPORT CryptoSymmetricKey* _Nullable CryptoCreateSymmetricKey(NSData* _Nullable key, NSString* _Nullable algo);

// skipped function FilterExpiredKeys with unsupported parameter or return types


/**
 * GetGopenPGP return global GopenPGP
 */
FOUNDATION_EXPORT CryptoGopenPGP* _Nullable CryptoGetGopenPGP(void);

/**
 * NewClearTextMessage generates a new ClearTextMessage from data and signature
 */
FOUNDATION_EXPORT CryptoClearTextMessage* _Nullable CryptoNewClearTextMessage(NSData* _Nullable data, NSData* _Nullable signature);

/**
 * NewClearTextMessageFromArmored returns the message body and unarmored signature from a clearsigned message.
 */
FOUNDATION_EXPORT CryptoClearTextMessage* _Nullable CryptoNewClearTextMessageFromArmored(NSString* _Nullable signedMessage, NSError* _Nullable* _Nullable error);

/**
 * NewPGPMessage generates a new PGPMessage from the unarmored binary data.
 */
FOUNDATION_EXPORT CryptoPGPMessage* _Nullable CryptoNewPGPMessage(NSData* _Nullable data);

/**
 * NewPGPMessageFromArmored generates a new PGPMessage from an armored string ready for decryption.
 */
FOUNDATION_EXPORT CryptoPGPMessage* _Nullable CryptoNewPGPMessageFromArmored(NSString* _Nullable armored, NSError* _Nullable* _Nullable error);

/**
 * NewPGPSignature generates a new PGPSignature from the unarmored binary data.
 */
FOUNDATION_EXPORT CryptoPGPSignature* _Nullable CryptoNewPGPSignature(NSData* _Nullable data);

/**
 * NewPGPSignatureFromArmored generates a new PGPSignature from the armored string ready for verification.
 */
FOUNDATION_EXPORT CryptoPGPSignature* _Nullable CryptoNewPGPSignatureFromArmored(NSString* _Nullable armored, NSError* _Nullable* _Nullable error);

/**
 * NewPGPSplitMessage generates a new PGPSplitMessage from the binary unarmored keypacket,
datapacket, and encryption algorithm.
 */
FOUNDATION_EXPORT CryptoPGPSplitMessage* _Nullable CryptoNewPGPSplitMessage(NSData* _Nullable keyPacket, NSData* _Nullable dataPacket);

/**
 * NewPGPSplitMessageFromArmored generates a new PGPSplitMessage by splitting an armored message into its
session key packet and symmetrically encrypted data packet.
 */
FOUNDATION_EXPORT CryptoPGPSplitMessage* _Nullable CryptoNewPGPSplitMessageFromArmored(NSString* _Nullable encrypted, NSError* _Nullable* _Nullable error);

/**
 * NewPlainMessage generates a new binary PlainMessage ready for encryption,
signature, or verification from the unencrypted binary data.
 */
FOUNDATION_EXPORT CryptoPlainMessage* _Nullable CryptoNewPlainMessage(NSData* _Nullable data);

/**
 * NewPlainMessageFromString generates a new text PlainMessage,
ready for encryption, signature, or verification from an unencrypted string.
 */
FOUNDATION_EXPORT CryptoPlainMessage* _Nullable CryptoNewPlainMessageFromString(NSString* _Nullable text);

/**
 * NewSymmetricKeyFromKeyPacket decrypts the binary symmetrically encrypted
session key packet and returns the session key.
 */
FOUNDATION_EXPORT CryptoSymmetricKey* _Nullable CryptoNewSymmetricKeyFromKeyPacket(NSData* _Nullable keyPacket, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT CryptoSymmetricKey* _Nullable CryptoNewSymmetricKeyFromToken(NSString* _Nullable passphrase, NSString* _Nullable algo);

// skipped function ReadArmoredKeyRing with unsupported parameter or return types


// skipped function ReadKeyRing with unsupported parameter or return types


@class CryptoMIMECallbacks;

/**
 * MIMECallbacks defines callback methods to process a MIME message.
 */
@interface CryptoMIMECallbacks : NSObject <goSeqRefInterface, CryptoMIMECallbacks> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onAttachment:(NSString* _Nullable)headers data:(NSData* _Nullable)data;
- (void)onBody:(NSString* _Nullable)body mimetype:(NSString* _Nullable)mimetype;
/**
 * Encrypted headers can be in an attachment and thus be placed at the end of the mime structure.
 */
- (void)onEncryptedHeaders:(NSString* _Nullable)headers;
- (void)onError:(NSError* _Nullable)err;
- (void)onVerified:(long)verified;
@end

#endif
