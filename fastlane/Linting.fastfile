require_relative '../pods_configuration'

def no_test_podspecs
  "fastlane/UsedOnlyForLintingAndNotForTheActualWork/TrustKit.podspec"
end

def default_test_podspecs
  ",ProtonCore-TestingToolkit.podspec,fastlane/UsedOnlyForLintingAndNotForTheActualWork/TrustKit.podspec,swift-snapshot-testing.podspec"
end

def crypto_subspec_for_single_variant
  crypto_subspec(:crypto_vpn_patched_go)
end

def crypto_subspecs_for_all_variants
  [
      :crypto_go,
      :crypto_patched_go,
      :crypto_vpn_patched_go,
      :crypto_search_go
  ]
  .map { |symbol| crypto_subspec(symbol) }
end

def build_spec(name, platforms, test_podspecs, *additional_podspecs)
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec").lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')},#{test_podspecs}}")
                    .gsub("{,","{")
                    .gsub(",}","}")
                    .gsub(",,,",",")
                    .gsub(",,",",")
  begin
    sh("sed", "-i", '''', "-r", "s/all_go_variants\.map/single_go_variant_for_linting\.map/g", "../pods_configuration.rb")
    pod_lib_lint(
      podspec: "ProtonCore-#{name}.podspec",
      allow_warnings: true,
      skip_tests: true,
      platforms: platforms,
      include_podspecs: dependencies,
      no_subspecs: true
    )
    sh("sed", "-i", '''', "-r", "s/single_go_variant_for_linting\.map/all_go_variants\.map/g", "../pods_configuration.rb")
  rescue => ex
    sh("sed", "-i", '''', "-r", "s/single_go_variant_for_linting\.map/all_go_variants\.map/g", "../pods_configuration.rb")
    raise ex
  end
end

def build_subspec(name, subspec, platforms, test_podspecs, *additional_podspecs)
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec", subspec).lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')}#{test_podspecs}}")
                    .gsub("{,","{") 
                    .gsub(",}","}")
                    .gsub(",,,",",")
                    .gsub(",,",",")
  pod_lib_lint(
    podspec: "ProtonCore-#{name}.podspec",
    allow_warnings: true,
    skip_tests: true,
    platforms: platforms,
    subspec: subspec,
    include_podspecs: dependencies
  )
end

private_lane :ensure_obfuscated_constants_are_generated do
  sh("bash", "../scripts/generate_obfuscated_constants.sh")
end

private_lane :install_dependencies_from_gemfile do
  bundle_install(gemfile: "fastlane/Gemfile")
end

lane :build_AccountDeletion_all_variants do
  install_dependencies_from_gemfile
  build_spec("AccountDeletion", "ios,macos", default_test_podspecs)
end 

lane :build_AccountDeletion_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("AccountDeletion", "ios", default_test_podspecs)
end 

lane :build_AccountRecovery_all_variants do
  install_dependencies_from_gemfile
  build_spec("AccountRecovery", "ios,macos", default_test_podspecs, "FeatureSwitch", "PushNotifications", "Services", "Authentication", "DataModel", "UIFoundations", "Networking", "PasswordRequest")
end 

lane :build_AccountRecovery_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("AccountRecovery", "ios", default_test_podspecs, "FeatureSwitch", "PushNotifications", "Services", "Authentication", "DataModel", "UIFoundations", "Networking", "PasswordRequest")
end

lane :build_AccountSwitcher_all_variants do
  install_dependencies_from_gemfile
  build_spec("AccountSwitcher", "ios", default_test_podspecs)
end

lane :build_AccountSwitcher_single_basic_variant do
  build_AccountSwitcher_all_variants
end

lane :build_APIClient_all_variants do
  install_dependencies_from_gemfile
  build_spec("APIClient", "ios,macos", default_test_podspecs, "Authentication", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_APIClient_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("APIClient", "ios", default_test_podspecs, "Authentication", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Authentication_all_variants do
  install_dependencies_from_gemfile
  build_spec("Authentication", "ios,macos", default_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Authentication_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Authentication", "ios", default_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Authentication_KeyGeneration_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Authentication-KeyGeneration", "ios,macos", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Authentication_KeyGeneration_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Authentication-KeyGeneration", "ios", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Challenge_all_variants do
  install_dependencies_from_gemfile
  build_spec("Challenge", "ios", no_test_podspecs)
end

lane :build_Challenge_single_basic_variant do
  build_Challenge_all_variants
end

lane :build_Common_all_variants do
  install_dependencies_from_gemfile
  build_spec("Common", "ios,macos", no_test_podspecs)
end

lane :build_Common_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Common", "ios", no_test_podspecs)
end

lane :build_CoreTranslation_all_variants do
  install_dependencies_from_gemfile
  build_spec("CoreTranslation", "ios,macos", no_test_podspecs)
end

lane :build_CoreTranslation_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("CoreTranslation", "ios", no_test_podspecs)
end

lane :build_DataModel_all_variants do
  install_dependencies_from_gemfile
  build_spec("DataModel", "ios,macos", default_test_podspecs)
end

lane :build_DataModel_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("DataModel", "ios", default_test_podspecs)
end

lane :build_Doh_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Doh", "ios,macos", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Authentication", "Services", "Observability")
end

lane :build_Doh_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Doh", "ios", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Authentication", "Services")
end

lane :build_Features_all_variants do
  install_dependencies_from_gemfile
  build_spec("Features", "ios,macos", no_test_podspecs)
end

lane :build_Features_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Features", "ios", no_test_podspecs)
end

lane :build_ForceUpgrade_all_variants do
  install_dependencies_from_gemfile
  build_spec("ForceUpgrade", "ios,macos", no_test_podspecs)
end

lane :build_ForceUpgrade_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("ForceUpgrade", "ios", no_test_podspecs)
end

lane :build_Foundations_all_variants do
  install_dependencies_from_gemfile
  build_spec("Foundations", "ios,macos", no_test_podspecs)
end

lane :build_Foundations_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Foundations", "ios", no_test_podspecs)
end

lane :build_GoLibs_all_variants do
  install_dependencies_from_gemfile
  all_go_variants
  .map { |symbol| crypto_subspec(symbol) }
  .map { |crypto_subspec| 
    build_subspec("GoLibs", crypto_subspec, "ios,macos", no_test_podspecs)
  }
end

lane :build_GoLibs_single_basic_variant do
  install_dependencies_from_gemfile
  build_subspec("GoLibs", crypto_subspec_for_single_variant, "ios", no_test_podspecs)
end

lane :build_Hash_all_variants do
  install_dependencies_from_gemfile
  build_spec("Hash", "ios,macos", no_test_podspecs)
end

lane :build_Hash_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Hash", "ios", no_test_podspecs)
end

lane :build_HumanVerification_all_variants do
  install_dependencies_from_gemfile
  build_spec("HumanVerification", "ios,macos", default_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_HumanVerification_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("HumanVerification", "ios", default_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Keymaker_all_variants do
  install_dependencies_from_gemfile
  build_spec("Keymaker", "ios,macos", no_test_podspecs, "DataModel", "Utilities", "Log", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Keymaker_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Keymaker", "ios", no_test_podspecs, "DataModel", "Utilities", "Log", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_KeyManager_all_variants do
  install_dependencies_from_gemfile
  build_spec("KeyManager", "ios,macos", no_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_KeyManager_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("KeyManager", "ios", no_test_podspecs, "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Log_all_variants do
  install_dependencies_from_gemfile
  build_spec("Log", "ios,macos", no_test_podspecs)
end

lane :build_Log_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Log", "ios", no_test_podspecs)
end

lane :build_Login_all_variants do
  install_dependencies_from_gemfile
  build_spec("Login", "ios,macos", default_test_podspecs, "ObfuscatedConstants", "QuarkCommands", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Login_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Login", "ios", default_test_podspecs, "ObfuscatedConstants", "QuarkCommands", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_LoginUI_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_subspec("LoginUI", "ios", default_test_podspecs, "ObfuscatedConstants")
end

lane :build_LoginUI_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("LoginUI", "ios", default_test_podspecs, "ObfuscatedConstants")
end

lane :build_Networking_all_variants do
  install_dependencies_from_gemfile
  build_spec("Networking", "ios,macos", default_test_podspecs, "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel", "FeatureSwitch", "Foundations", "Observability")
end

lane :build_Networking_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Networking", "ios", default_test_podspecs, "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel", "FeatureSwitch", "Foundations")
end

lane :build_ObfuscatedConstants_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("ObfuscatedConstants", "ios,macos", no_test_podspecs)
end

lane :build_ObfuscatedConstants_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("ObfuscatedConstants", "macos", no_test_podspecs)
end

lane :build_Payments_all_variants do
  install_dependencies_from_gemfile
  build_spec("Payments", "ios,macos", default_test_podspecs, "Observability")
end

lane :build_Payments_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Payments", "ios", default_test_podspecs, "Observability")
end

lane :build_PaymentsUI_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("PaymentsUI", "ios", default_test_podspecs, "ObfuscatedConstants", "Observability")
end

lane :build_PaymentsUI_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("PaymentsUI", "ios", default_test_podspecs, "ObfuscatedConstants", "Observability")
end

lane :build_PushNotifications_all_variants do
  install_dependencies_from_gemfile
  build_spec("PushNotifications", "ios,macos", default_test_podspecs, "Log", "DataModel", "Keymaker", "Networking", "Crypto", "CryptoGoInterface", "FeatureSwitch", "Services")
end 

lane :build_PushNotifications_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("PushNotifications", "ios", default_test_podspecs, "Log", "DataModel", "Keymaker", "Networking", "Crypto", "CryptoGoInterface", "FeatureSwitch", "Services")
end 

lane :build_QuarkCommands_all_variants do
  install_dependencies_from_gemfile
  build_spec("QuarkCommands", "ios,macos", default_test_podspecs)
end

lane :build_QuarkCommands_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("QuarkCommands", "ios", default_test_podspecs)
end

lane :build_Services_all_variants do
  install_dependencies_from_gemfile
  build_spec("Services", "macos,ios", default_test_podspecs, "Hash", "Authentication-KeyGeneration", "APIClient", "Challenge", "Authentication", "Login", "UIFoundations", "Foundations", "Observability", "DataModel", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Services_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Services", "ios", default_test_podspecs, "Hash", "Authentication-KeyGeneration", "APIClient", "Challenge", "Authentication", "Login", "UIFoundations", "Foundations", "Observability", "Crypto", "CryptoGoInterface", "CryptoGoImplementation", "GoLibs")
end

lane :build_Settings_all_variants do
  install_dependencies_from_gemfile
  build_spec("Settings", "ios", default_test_podspecs)
end

lane :build_Settings_single_basic_variant do
  build_Settings_all_variants
end

lane :build_TroubleShooting_all_variants do
  install_dependencies_from_gemfile
  build_spec("TroubleShooting", "ios", default_test_podspecs)
end

lane :build_TroubleShooting_single_basic_variant do
  build_TroubleShooting_all_variants
end

lane :build_UIFoundations_all_variants do
  install_dependencies_from_gemfile
  build_spec("UIFoundations", "ios,macos", default_test_podspecs)
end

lane :build_UIFoundations_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("UIFoundations", "ios", default_test_podspecs)
end

lane :build_Utilities_all_variants do
  install_dependencies_from_gemfile
  build_spec("Utilities", "ios,macos", no_test_podspecs)
end

lane :build_Utilities_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("Utilities", "ios", no_test_podspecs)
end

lane :build_VCard_all_variants do
  install_dependencies_from_gemfile
  build_spec("VCard", "ios,macos", no_test_podspecs)
end

lane :build_VCard_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("VCard", "ios", no_test_podspecs)
end

lane :build_Observability_all_variants do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Observability", "ios,macos", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Authentication", "Services", "Doh", "Networking", "FeatureSwitch", "Foundations")
end

lane :build_Observability_single_basic_variant do
  install_dependencies_from_gemfile
  ensure_obfuscated_constants_are_generated
  build_spec("Observability", "ios", default_test_podspecs, "ObfuscatedConstants", "DataModel", "Networking", "CoreTranslation", "Log", "Utilities", "Environment", "Authentication", "Services", "Doh", "Networking", "FeatureSwitch", "Foundations")
end
  
lane :build_MissingScopes_all_variants do
  install_dependencies_from_gemfile
  build_spec("MissingScopes", "ios,macos", no_test_podspecs)
end

lane :build_MissingScopes_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("MissingScopes", "ios", no_test_podspecs)
end

lane :build_PasswordRequest_single_basic_variant do
  install_dependencies_from_gemfile
  build_spec("PasswordRequest", "ios", no_test_podspecs)
end
  
### create pod add lane placeholder

lane :build_all_subspecs_all_variants do
  build_AccountDeletion_all_variants
  build_AccountRecovery_all_variants
  build_AccountSwitcher_all_variants
  build_APIClient_all_variants
  build_Authentication_all_variants
  # build_Authentication_KeyGeneration_all_variants
  build_Challenge_all_variants
  build_Common_all_variants
  build_CoreTranslation_all_variants
  # build_Crypto_all_variants
  # build_Crypto_VPN_all_variants
  build_DataModel_all_variants
  # build_Doh_all_variants
  build_Features_all_variants
  build_ForceUpgrade_all_variants
  build_Foundations_all_variants
  build_Hash_all_variants
  build_HumanVerification_all_variants
  build_Keymaker_all_variants
  build_KeyManager_all_variants
  build_Log_all_variants
  # build_Login_all_variants
  # build_LoginUI_all_variants
  build_Networking_all_variants
  # build_ObfuscatedConstants_all_variants
  # build_Payments_all_variants
  # build_PaymentsUI_all_variants
  # build_QuarkCommands_all_variants
  build_PushNotifications_all_variants
  build_Services_all_variants
  build_Settings_all_variants
  build_TroubleShooting_all_variants
  build_UIFoundations_all_variants
  build_Utilities_all_variants
  build_VCard_all_variants
  # build_Observability_all_variants
  # build_MissingScopes_all_variants
  ### create pod all variant placeholder
end

lane :build_all_subspecs_single_basic_variant do
  build_AccountDeletion_single_basic_variant
  build_AccountRecovery_single_basic_variant
  build_AccountSwitcher_single_basic_variant
  build_APIClient_single_basic_variant
  build_Authentication_single_basic_variant
  build_Authentication_KeyGeneration_single_basic_variant
  build_Challenge_single_basic_variant
  build_Common_single_basic_variant
  build_CoreTranslation_single_basic_variant
  build_Crypto_single_basic_variant
  build_Crypto_VPN_single_basic_variant
  build_DataModel_single_basic_variant
  build_Doh_single_basic_variant
  build_Features_single_basic_variant
  build_ForceUpgrade_single_basic_variant
  build_Foundations_single_basic_variant
  build_Hash_single_basic_variant
  build_HumanVerification_single_basic_variant
  build_Keymaker_single_basic_variant
  build_KeyManager_single_basic_variant
  build_Log_single_basic_variant
  build_Login_single_basic_variant
  build_LoginUI_single_basic_variant
  build_Networking_single_basic_variant
  build_ObfuscatedConstants_single_basic_variant

  build_Payments_single_basic_variant
  build_PaymentsUI_single_basic_variant
  build_PushNotifications_single_basic_variant
  build_QuarkCommands_single_basic_variant
  build_Services_single_basic_variant
  build_Settings_single_basic_variant
  build_TroubleShooting_single_basic_variant
  build_UIFoundations_single_basic_variant
  build_Utilities_single_basic_variant
  build_VCard_single_basic_variant
  build_Observability_single_basic_variant
  build_MissingScopes_single_basic_variant
  build_PasswordRequest_single_basic_variant
  ### create pod single variant placeholder
end
