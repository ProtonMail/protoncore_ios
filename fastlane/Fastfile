# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

def lint_spec(name, platforms, *additional_podspecs)
  # ProtonCore-TestingToolkit.podspec is added as implicit dependency to everything, otherwise the linting complains that it cannot resolve test_spec dependencies
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec").lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')},ProtonCore-TestingToolkit.podspec}")
                    .gsub(",,",",") 
                    .gsub("{,","{")
  pod_lib_lint(
    podspec: "ProtonCore-#{name}.podspec",
    allow_warnings: true,
    skip_tests: true,
    platforms: platforms,
    include_podspecs: dependencies,
    no_subspecs: true
  )
end

def lint_subspec(name, subspec, platforms, *additional_podspecs)
  # ProtonCore-TestingToolkit.podspec is added as implicit dependency to everything, otherwise the linting complains that it cannot resolve test_spec dependencies
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec", subspec).lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')},ProtonCore-TestingToolkit.podspec}")
                    .gsub("{,","{") 
                    .gsub(",,",",")
  pod_lib_lint(
    podspec: "ProtonCore-#{name}.podspec",
    allow_warnings: true,
    skip_tests: true,
    platforms: platforms,
    subspec: subspec,
    include_podspecs: dependencies
  )
end

def derived_data_path
  "~/ProtonCore/UnitTests/" + ENV['CI_PIPELINE_IID'] + "/DerivedData/"
end

platform :ios do

  lane :lint_AccountSwitcher do
    lint_spec("AccountSwitcher", "ios")
  end 

  lane :lint_APIClient_full do
    lint_spec("APIClient", "ios,macos", "Crypto", "Crypto-VPN", "Authentication")
  end

  lane :lint_APIClient_lite do
    lint_spec("APIClient", "ios", "Crypto", "Crypto-VPN", "Authentication")
  end

  lane :lint_Authentication_full do
    lint_subspec("Authentication", "UsingCrypto", "ios,macos")
    lint_subspec("Authentication", "UsingCryptoVPN", "ios,macos")
  end

  lane :lint_Authentication_lite do
    lint_subspec("Authentication", "UsingCrypto", "ios")
  end

  lane :lint_Authentication_KeyGeneration_full do
    lint_subspec("Authentication-KeyGeneration", "UsingCrypto", "ios,macos")
    lint_subspec("Authentication-KeyGeneration", "UsingCryptoVPN", "ios,macos")
  end

  lane :lint_Authentication_KeyGeneration_lite do
    lint_subspec("Authentication-KeyGeneration", "UsingCrypto", "ios")
  end

  lane :lint_Challenge do
    lint_spec("Challenge", "ios")
  end

  lane :lint_Common_full do
    lint_spec("Common", "ios,macos")
  end

  lane :lint_Common_lite do
    lint_spec("Common", "ios")
  end

  lane :lint_CoreTranslation_full do
    lint_spec("CoreTranslation", "ios,macos")
  end

  lane :lint_CoreTranslation_lite do
    lint_spec("CoreTranslation", "ios")
  end

  lane :lint_Crypto_full do
    lint_spec("Crypto", "ios,macos")
  end

  lane :lint_Crypto_lite do
    lint_spec("Crypto", "ios")
  end

  lane :lint_Crypto_VPN_full do
    lint_spec("Crypto-VPN", "ios,macos")
  end

  lane :lint_Crypto_VPN_lite do
    lint_spec("Crypto-VPN", "ios")
  end

  lane :lint_DataModel_full do
    lint_spec("DataModel", "ios,macos")
  end

  lane :lint_DataModel_lite do
    lint_spec("DataModel", "ios")
  end

  lane :lint_Doh_full do
    lint_spec("Doh", "ios,macos")
  end

  lane :lint_Doh_lite do
    lint_spec("Doh", "ios")
  end

  lane :lint_Features_full do
    lint_subspec("Features", "UsingCrypto", "ios")
    lint_subspec("Features", "UsingCryptoVPN", "ios")
  end

  lane :lint_Features_lite do
    lint_subspec("Features", "UsingCrypto", "ios")
  end

  lane :lint_ForceUpgrade do
    lint_spec("ForceUpgrade", "ios")
  end

  lane :lint_Foundations_full do
    lint_spec("Foundations", "ios,macos")
  end

  lane :lint_Foundations_lite do
    lint_spec("Foundations", "ios")
  end

  lane :lint_GoSRP_full do
    lint_spec("GoSRP", "ios,macos")
  end

  lane :lint_GoSRP_lite do
    lint_spec("GoSRP", "ios")
  end

  lane :lint_HumanVerification do
    lint_spec("HumanVerification", "ios")
  end

  lane :lint_Keymaker_full do
    lint_subspec("Keymaker", "UsingCrypto", "ios,macos")
    lint_subspec("Keymaker", "UsingCryptoVPN", "ios,macos")
  end

  lane :lint_Keymaker_lite do
    lint_subspec("Keymaker", "UsingCrypto", "ios")
  end

  lane :lint_Log_full do
    lint_spec("Log", "ios,macos")
  end

  lane :lint_Log_lite do
    lint_spec("Log", "ios")
  end

  lane :lint_KeyManager_full do
    lint_subspec("KeyManager", "UsingCrypto", "ios,macos")
    lint_subspec("KeyManager", "UsingCryptoVPN", "ios,macos")
  end

  lane :lint_KeyManager_lite do
    lint_subspec("KeyManager", "UsingCryptoVPN", "ios")
  end

  lane :lint_Login_full do
    lint_subspec("Login", "UsingCrypto", "ios")
    lint_subspec("Login", "UsingCryptoVPN", "ios")
  end

  lane :lint_Login_lite do
    lint_subspec("Login", "UsingCrypto", "ios")
  end

  lane :lint_Networking_full do
    lint_subspec("Networking", "AFNetworking", "ios,macos", "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel")
    lint_subspec("Networking", "Alamofire", "ios,macos", "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel")
  end

  lane :lint_Networking_lite do
    lint_subspec("Networking", "Alamofire", "ios", "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel")
  end

  lane :lint_OpenPGP_full do
    lint_spec("OpenPGP", "ios,macos")
  end

  lane :lint_OpenPGP_lite do
    lint_spec("OpenPGP", "ios")
  end

  lane :lint_ObfuscatedConstants_full do
    lint_spec("ObfuscatedConstants", "ios,macos")
  end

  lane :lint_ObfuscatedConstants_lite do
    lint_spec("ObfuscatedConstants", "macos")
  end

  lane :lint_Payments_full do
    lint_subspec("Payments", "UsingCrypto", "ios,macos")
    lint_subspec("Payments", "UsingCryptoVPN", "ios,macos")
  end

  lane :lint_Payments_lite do
    lint_subspec("Payments", "UsingCrypto", "ios")
  end

  lane :lint_PaymentsUI_full do
    lint_subspec("PaymentsUI", "UsingCrypto", "ios")
    lint_subspec("PaymentsUI", "UsingCryptoVPN", "ios")
  end

  lane :lint_PaymentsUI_lite do
    lint_subspec("PaymentsUI", "UsingCrypto", "ios")
  end

  lane :lint_Services_full do
    lint_spec("Services", "ios,macos")
  end

  lane :lint_Services_lite do
    lint_spec("Services", "ios")
  end

  lane :lint_Settings do
    lint_spec("Settings", "ios")
  end

  lane :lint_SRP_full do
    lint_spec("SRP", "ios,macos")
  end

  lane :lint_SRP_lite do
    lint_spec("SRP", "ios")
  end

  lane :lint_UIFoundations_full do
    lint_spec("UIFoundations", "ios,macos")
  end

  lane :lint_UIFoundations_lite do
    lint_spec("UIFoundations", "ios")
  end

  lane :lint_Utilities_full do
    lint_spec("Utilities", "ios,macos")
  end

  lane :lint_Utilities_lite do
    lint_spec("Utilities", "ios")
  end

  lane :lint_VCard_full do
    lint_spec("VCard", "ios,macos")
  end

  lane :lint_VCard_lite do
    lint_spec("VCard", "ios")
  end

  lane :lint_subspecs_full_1 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_AccountSwitcher
    lint_APIClient_full
    lint_Authentication_full
  end

  lane :lint_subspecs_full_2 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_Authentication_KeyGeneration_full
    lint_Challenge
    lint_Common_full
    lint_CoreTranslation_full
    lint_Crypto_full
    lint_Crypto_VPN_full
  end 

  lane :lint_subspecs_full_3 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_DataModel_full
    lint_Doh_full
    lint_Features_full
    lint_ForceUpgrade
    lint_Foundations_full
    lint_GoSRP_full
    lint_HumanVerification
    lint_Keymaker_full
    # lint_ObfuscatedConstants_full
  end

  lane :lint_subspecs_full_4 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_Log_full
    lint_KeyManager_full
    lint_Login_full
    lint_Networking_full
    lint_OpenPGP_full
    lint_Payments_full
  end

  lane :lint_subspecs_full_5 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_PaymentsUI_full
    lint_Services_full
    lint_Settings
    lint_SRP_full
    lint_UIFoundations_full
    lint_Utilities_full
    lint_VCard_full
  end

  lane :lint_all_subspecs_full do
    lint_subspecs_full_1
    lint_subspecs_full_2
    lint_subspecs_full_3
    lint_subspecs_full_4
    lint_subspecs_full_5
  end

  lane :lint_subspecs_lite_1 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_AccountSwitcher
    lint_APIClient_lite
    lint_Authentication_lite
    lint_Authentication_KeyGeneration_lite
    lint_Challenge
  end

  lane :lint_subspecs_lite_2 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_Common_lite
    lint_CoreTranslation_lite
    lint_Crypto_lite
    lint_Crypto_VPN_lite
    lint_DataModel_lite
    lint_Doh_lite
    lint_Features_lite
  end 

  lane :lint_subspecs_lite_3 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_ForceUpgrade
    lint_Foundations_lite
    lint_GoSRP_lite
    lint_HumanVerification
    lint_Keymaker_lite
    lint_Log_lite
    lint_KeyManager_lite
    # lint_ObfuscatedConstants_lite
  end

  lane :lint_subspecs_lite_4 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_Login_lite
    lint_Networking_lite
    lint_OpenPGP_lite
    lint_Payments_lite
    lint_Services_lite
  end

  lane :lint_subspecs_lite_5 do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_PaymentsUI_lite
    lint_Settings
    lint_SRP_lite
    lint_UIFoundations_lite
    lint_Utilities_lite
    lint_VCard_lite
  end

  lane :lint_all_subspecs_lite do
    lint_subspecs_lite_1
    lint_subspecs_lite_2
    lint_subspecs_lite_3
    lint_subspecs_lite_4
    lint_subspecs_lite_5
  end

  lane :run_tests_locally do
    sh("bash", "../scripts/generate_obfuscated_constants.sh", "--only-tests")
    run_tests(workspace: "example-app/ExampleApp.xcworkspace", scheme: "Example-UnitTests", build_for_testing: true)
    run_tests(workspace: "example-app/ExampleApp.xcworkspace", scheme: "Example-UnitTests", clean: false, skip_build: true)
  end

  lane :test do

    sh("echo", derived_data_path)
    
    sh("mkdir", "-p", derived_data_path)

    sh("bash", "../scripts/generate_obfuscated_constants.sh", "--only-tests")
    
    run_tests(
      workspace: "example-app/ExampleApp.xcworkspace",
      scheme: "Example-UnitTests",
      derived_data_path: derived_data_path,
      build_for_testing: true
    )
    
    run_tests(
      workspace: "example-app/ExampleApp.xcworkspace",
      scheme: "Example-UnitTests",
      clean: false,
      skip_build: true,
      derived_data_path: derived_data_path
    )

    clear_derived_data(
      derived_data_path: derived_data_path
    )

  end
end
