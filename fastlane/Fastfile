# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

def lint_spec(name, platforms, *additional_podspecs)
  # ProtonCore-TestingToolkit.podspec is added as implicit dependency to everything, otherwise the linting complains that it cannot resolve test_spec dependencies
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec").lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')},ProtonCore-TestingToolkit.podspec}")
                    .gsub(",,",",") 
                    .gsub("{,","{")
  pod_lib_lint(
    podspec: "ProtonCore-#{name}.podspec",
    allow_warnings: true,
    skip_tests: true,
    platforms: platforms,
    include_podspecs: dependencies
  )
end

def lint_subspec(name, subspec, platforms, *additional_podspecs)
  # ProtonCore-TestingToolkit.podspec is added as implicit dependency to everything, otherwise the linting complains that it cannot resolve test_spec dependencies
  dependencies = sh("ruby", "../scripts/identify_local_podspecs.rb", "../ProtonCore-#{name}.podspec", subspec).lines.last.strip
                    .gsub("}",",#{additional_podspecs.map { |e| "ProtonCore-" + e + ".podspec"  }.join(',')},ProtonCore-TestingToolkit.podspec}")
                    .gsub("{,","{") 
                    .gsub(",,",",")
  pod_lib_lint(
    podspec: "ProtonCore-#{name}.podspec",
    allow_warnings: true,
    skip_tests: true,
    platforms: platforms,
    subspec: subspec,
    include_podspecs: dependencies
  )
end

def derived_data_path
  "~/ProtonCore/UnitTests/" + ENV['CI_PIPELINE_IID'] + "/DerivedData/"
end

platform :ios do

  desc "Lint all subspecs"
  lane :lint_subspecs do
    bundle_install(gemfile: "fastlane/Gemfile")
    lint_spec("AccountSwitcher", "ios")
    lint_spec("APIClient", "ios,macos")
    lint_subspec("Authentication", "UsingCrypto", "ios,macos")
    lint_subspec("Authentication", "UsingCryptoVPN", "ios,macos")
    lint_subspec("Authentication-KeyGeneration", "UsingCrypto", "ios,macos")
    lint_subspec("Authentication-KeyGeneration", "UsingCryptoVPN", "ios,macos")
    lint_spec("Challenge", "ios")
    lint_spec("Common", "ios,macos")
    lint_spec("CoreTranslation", "ios,macos")
    lint_spec("Crypto", "ios,macos")
    lint_spec("Crypto-VPN", "ios,macos")
    lint_spec("DataModel", "ios,macos")
    lint_spec("Doh", "ios,macos")
    lint_spec("ForceUpgrade", "ios")
    lint_spec("Foundations", "ios,macos")
    lint_spec("GoSRP", "ios,macos")
    lint_spec("HumanVerification", "ios")
    lint_subspec("Keymaker", "UsingCrypto", "ios,macos")
    lint_subspec("Keymaker", "UsingCryptoVPN", "ios,macos")
    lint_subspec("KeyManager", "UsingCrypto", "ios,macos")
    lint_subspec("KeyManager", "UsingCryptoVPN", "ios,macos")
    lint_spec("Log", "ios,macos")
    lint_subspec("Login", "UsingCrypto", "ios")
    lint_subspec("Login", "UsingCryptoVPN", "ios")
    lint_spec("Networking", "ios,macos", "Utilities", "Doh", "Services", "APIClient", "Log", "DataModel")
    lint_spec("OpenPGP", "ios,macos")
    lint_subspec("Payments", "UsingCrypto", "ios,macos")
    lint_subspec("Payments", "UsingCryptoVPN", "ios,macos")
    lint_subspec("PaymentsUI", "UsingCrypto", "ios")
    lint_subspec("PaymentsUI", "UsingCryptoVPN", "ios")
    lint_spec("Services", "ios,macos")
    lint_spec("SRP", "ios,macos")
    lint_spec("UIFoundations", "ios,macos")
    lint_spec("Utilities", "ios,macos")
    lint_spec("VCard", "ios,macos")
  end

  desc "Run all the tests"
  lane :test do

    sh("echo", derived_data_path)
    
    sh("mkdir", "-p", derived_data_path)

    sh("bash", "../scripts/generate_obfuscated_constants.sh")
    
    run_tests(
      workspace: "apps/CoreExample/CoreExample.xcworkspace",
      scheme: "CoreExample-UnitTests",
      build_for_testing: true,
      derived_data_path: derived_data_path
    )
    
    run_tests(
      workspace: "apps/CoreExample/CoreExample.xcworkspace",
      scheme: "CoreExample-UnitTests",
      clean: false,
      skip_build: true,
      derived_data_path: derived_data_path
    )

    clear_derived_data(
      derived_data_path: derived_data_path
    )

    sh("rm", "-rf", derived_data_path)

  end
end
