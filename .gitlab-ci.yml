include:
  - project: "proton/devops/atlas-deploy"
    ref: main
    file: "/scenarios/pipeline-env.yml"
  - project: "translations/generator"
    ref: master
    file: "/jobs/sync-crowdin.gitlab-ci.yml"
  - project: "translations/generator"
    ref: master
    file: "/jobs/commit-locales.gitlab-ci.yml"

stages:
  - i18n
  - releasing
  - release_testing
  - mirror_develop_to_github
  - linting
  - unit_testing
  - ui_testing_light
  - building_subspecs
  - deploy
  - ui_testing
  - cleanup
  
variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  GEM_HOME: "$CI_PROJECT_DIR/gem"
  ATLAS_DEPLOY_SCOPE: "qa-core-iOS-auto-$CI_PIPELINE_IID"
  ATLAS_DEPLOY_LIST: ""

releasing:
  stage: releasing
  needs: []
  artifacts:
    when: always
    name: "ReleaseNotes-$CI_COMMIT_SHA"
    paths:
      - ReleaseNotes.md
    expire_in: never
  script:
    - git remote set-url origin https://protoncore:$PROTONCORE_ACCESS_TOKEN@${PROTON_GIT_URL}/apple/shared/protoncore.git
    - git remote -v
    - bash scripts/finish_release_mr_with_new_version.sh
  <<: &release_jobs
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_TITLE =~ /^Merge branch .release\/.+ into .+$/'
        when: always
      - if: "$CI_COMMIT_BRANCH"
        when: never
    allow_failure: false
    interruptible: false
    variables:
      GIT_STRATEGY: clone
      GIT_DEPTH: 0
    tags:
      - macstadium-m1-protoncore

# happens only if develop was not already mirrored as part of releasing
mirror_develop_to_github:
  stage: mirror_develop_to_github
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TITLE =~ /^Merge branch .release\/.+ into .+$/'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: "$CI_COMMIT_BRANCH"
      when: never
  allow_failure: false
  interruptible: false
  needs: []
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  script:
    - bash scripts/mirror_to_github.sh develop
  tags:
    - macstadium-m1-protoncore

linting:
  stage: linting
  script: tools/portable_swiftlint/swiftlint --config .swiftlint.yml --reporter junit > swiftlint.xml
  rules: &rules_commit_and_mr
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_BRANCH"
  needs: []
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  allow_failure: false
  interruptible: true
  artifacts:
    name: "ios-lint-$CI_COMMIT_SHA"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days
  tags:
    - macstadium-m1-protoncore

#
# --- Unit testing related tasks ---
#

build_mac:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  before_script:
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  script:
    - fastlane build_mac
  after_script:
    - fastlane cleanup_build_mac
    - ssh-add -D
  tags:
    - macstadium-m1-protoncore

build_ios:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  before_script:
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  script:
    - fastlane build_ios
  after_script:
    - fastlane cleanup_build_ios
    - ssh-add -D
  tags:
    - macstadium-m1-protoncore

build_mac_ios14macos11:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  before_script:
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  script:
    - fastlane build_mac_ios14macos11
  after_script:
    - fastlane cleanup_build_mac_ios14macos11
    - ssh-add -D
  tags:
    - macstadium-m1-protoncore

build_ios_ios14macos11:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  before_script:
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  script:
    - fastlane build_ios_ios14macos11
  after_script:
    - fastlane cleanup_build_ios_ios14macos11
    - ssh-add -D
  tags:
    - macstadium-m1-protoncore
    
run_unit_tests:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  before_script:
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  script:
    - fastlane run_unit_tests
  coverage: '/Total coverage value: (\d+.\d+)\%/'
  after_script:
    # print coverate percentage to logs so Gitlab can pick it up
    - bash scripts/print_unit_tests_coverage_for_gitlab.sh
    # generate coverage json from xcresult
    - xcrun xccov view --report --json fastlane/test_output/Example-UnitTests.xcresult > fastlane/test_output/Example-UnitTests.json
    # generate cobertura xml from coverage json
    - xcc generate fastlane/test_output/Example-UnitTests.json fastlane/test_output cobertura-xml --verbose
    # run danger that reads xcov, but only for MRs
    - if [ "${CI_PIPELINE_SOURCE}" == "merge_request_event" ]; then danger --dangerfile=fastlane/Dangerfile; fi
    - fastlane cleanup_run_unit_tests
    - ssh-add -D
  artifacts:
    name: "ios-tests-$CI_COMMIT_SHA"
    when: always
    paths:
      - fastlane/test_output/report.html
      - DerivedData/Logs/Test/
    expire_in: 14 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: fastlane/test_output/cobertura.xml
      junit:
        - fastlane/test_output/report.junit
  tags:
    - macstadium-m1-protoncore-tests

run_localization_tests:
  dependencies: []
  stage: unit_testing
  retry: 0
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  script:
    - fastlane run_localization_tests
  after_script:
    - fastlane cleanup_run_localization_tests
  tags:
    - macstadium-m1-protoncore-tests

run_ui_testing_light:
  dependencies: []
  stage: ui_testing_light
  retry: 0
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
    - job: build_mac
      artifacts: false
    - job: build_ios
      artifacts: false
    - job: build_mac_ios14macos11
      artifacts: false
    - job: build_ios_ios14macos11
      artifacts: false
    - job: run_unit_tests
      artifacts: false
    - job: run_localization_tests
      artifacts: false
  script:
    - fastlane build_ui_tests
    - bash scripts/run_ui_tests_on_ci.sh --light
  before_script:
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
  after_script:
    - rm -rf ~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/
    - fastlane cleanup_build_ui_tests
    - ssh-add -D
  tags:
    - macstadium-m1-protoncore

#
# --- Modules building related tasks ---
#

build_AccountDeletion_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_AccountDeletion_all_variants
  <<: &building_subspecs_full
    dependencies: []
    stage: building_subspecs
    retry: 1
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "main"'
        when: never
      - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
        when: never
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      - if: "$CI_COMMIT_BRANCH"
        when: never
    allow_failure: false
    interruptible: true
    variables:
      GIT_STRATEGY: clone
      GIT_DEPTH: 0
    needs:
      - job: build_mac
        artifacts: false
      - job: build_ios
        artifacts: false
      - job: build_mac_ios14macos11
        artifacts: false
      - job: build_ios_ios14macos11
        artifacts: false
      - job: run_unit_tests
        artifacts: false
      - job: run_ui_testing_light
        artifacts: false
    tags:
      - macstadium-protoncore-module_building

build_AccountSwitcher_all_variants:
  script:
    - fastlane build_AccountSwitcher_all_variants
  <<: *building_subspecs_full

build_APIClient_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_APIClient_all_variants
  <<: *building_subspecs_full

build_Authentication_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Authentication_all_variants
  <<: *building_subspecs_full

build_Authentication_KeyGeneration_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Authentication_KeyGeneration_all_variants
  <<: *building_subspecs_full

build_Challenge_all_variants:
  script:
    - fastlane build_Challenge_all_variants
  <<: *building_subspecs_full

build_Common_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Common_all_variants
  <<: *building_subspecs_full

build_CoreTranslation_all_variants:
  script:
    - fastlane build_CoreTranslation_all_variants
  <<: *building_subspecs_full

build_GoLibs_all_variants:
  script:
    - fastlane build_GoLibs_all_variants
  <<: *building_subspecs_full

build_DataModel_all_variants:
  script:
    - fastlane build_DataModel_all_variants
  <<: *building_subspecs_full

build_Doh_all_variants:
  script:
    - fastlane build_Doh_all_variants
  <<: *building_subspecs_full

build_Features_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Features_all_variants
  <<: *building_subspecs_full

build_ForceUpgrade_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_ForceUpgrade_all_variants
  <<: *building_subspecs_full

build_Foundations_all_variants:
  script:
    - fastlane build_Foundations_all_variants
  <<: *building_subspecs_full

build_Hash_all_variants:
  script:
    - fastlane build_Hash_all_variants
  <<: *building_subspecs_full

build_HumanVerification_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_HumanVerification_all_variants
  <<: *building_subspecs_full

build_Keymaker_all_variants:
  script:
    - fastlane build_Keymaker_all_variants
  <<: *building_subspecs_full

build_KeyManager_all_variants:
  script:
    - fastlane build_KeyManager_all_variants
  <<: *building_subspecs_full

build_Log_all_variants:
  script:
    - fastlane build_Log_all_variants
  <<: *building_subspecs_full

build_Login_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Login_all_variants
  <<: *building_subspecs_full

build_LoginUI_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_LoginUI_all_variants
  <<: *building_subspecs_full

build_Networking_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Networking_all_variants
  <<: *building_subspecs_full

build_ObfuscatedConstants_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_ObfuscatedConstants_all_variants
  <<: *building_subspecs_full

build_OpenPGP_all_variants:
  script:
    - fastlane build_OpenPGP_all_variants
  <<: *building_subspecs_full

build_Payments_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Payments_all_variants
  <<: *building_subspecs_full

build_PaymentsUI_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_PaymentsUI_all_variants
  <<: *building_subspecs_full

build_QuarkCommands_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_QuarkCommands_all_variants
  <<: *building_subspecs_full

build_TroubleShooting_all_variants:
  script:
    - fastlane build_TroubleShooting_all_variants
  <<: *building_subspecs_full

build_Services_all_variants:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Services_all_variants
  <<: *building_subspecs_full

build_Settings_all_variants:
  script:
    - fastlane build_Settings_all_variants
  <<: *building_subspecs_full

build_UIFoundations_all_variants:
  script:
    - fastlane build_UIFoundations_all_variants
  <<: *building_subspecs_full

build_Utilities_all_variants:
  script:
    - fastlane build_Utilities_all_variants
  <<: *building_subspecs_full

build_VCard_all_variants:
  script:
    - fastlane build_VCard_all_variants
  <<: *building_subspecs_full

build_Observability_all_variants:
  script:
    - fastlane build_Observability_all_variants
  <<: *building_subspecs_full
  
### create pod build all variant place holder

build_AccountDeletion_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_AccountDeletion_single_basic_variant
  <<: &building_subspecs_lite
    dependencies: []
    stage: building_subspecs
    retry: 1
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "main"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "develop"'
        when: never
      - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
        when: never
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: never
      - if: "$CI_COMMIT_BRANCH"
    allow_failure: false
    interruptible: true
    variables:
      GIT_STRATEGY: clone
      GIT_DEPTH: 0
    needs:
      - job: build_mac
        artifacts: false
      - job: build_ios
        artifacts: false
      - job: build_mac_ios14macos11
        artifacts: false
      - job: build_ios_ios14macos11
        artifacts: false
      - job: run_unit_tests
        artifacts: false
      - job: run_ui_testing_light
        artifacts: false
    tags:
      - macstadium-protoncore-module_building

build_AccountSwitcher_single_basic_variant:
  script:
    - fastlane build_AccountSwitcher_single_basic_variant
  <<: *building_subspecs_lite

build_APIClient_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_APIClient_single_basic_variant
  <<: *building_subspecs_lite

build_Authentication_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Authentication_single_basic_variant
  <<: *building_subspecs_lite

build_Authentication_KeyGeneration_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Authentication_KeyGeneration_single_basic_variant
  <<: *building_subspecs_lite

build_Challenge_single_basic_variant:
  script:
    - fastlane build_Challenge_single_basic_variant
  <<: *building_subspecs_lite

build_Common_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Common_single_basic_variant
  <<: *building_subspecs_lite

build_CoreTranslation_single_basic_variant:
  script:
    - fastlane build_CoreTranslation_single_basic_variant
  <<: *building_subspecs_lite

build_GoLibs_single_basic_variant:
  script:
    - fastlane build_GoLibs_single_basic_variant
  <<: *building_subspecs_lite

build_DataModel_single_basic_variant:
  script:
    - fastlane build_DataModel_single_basic_variant
  <<: *building_subspecs_lite

build_Doh_single_basic_variant:
  script:
    - fastlane build_Doh_single_basic_variant
  <<: *building_subspecs_lite

build_Features_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Features_single_basic_variant
  <<: *building_subspecs_lite

build_ForceUpgrade_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_ForceUpgrade_single_basic_variant
  <<: *building_subspecs_lite

build_Foundations_single_basic_variant:
  script:
    - fastlane build_Foundations_single_basic_variant
  <<: *building_subspecs_lite

build_Hash_single_basic_variant:
  script:
    - fastlane build_Hash_single_basic_variant
  <<: *building_subspecs_lite

build_HumanVerification_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_HumanVerification_single_basic_variant
  <<: *building_subspecs_lite

build_Keymaker_single_basic_variant:
  script:
    - fastlane build_Keymaker_single_basic_variant
  <<: *building_subspecs_lite

build_KeyManager_single_basic_variant:
  script:
    - fastlane build_KeyManager_single_basic_variant
  <<: *building_subspecs_lite

build_Log_single_basic_variant:
  script:
    - fastlane build_Log_single_basic_variant
  <<: *building_subspecs_lite

build_Login_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Login_single_basic_variant
  <<: *building_subspecs_lite

build_LoginUI_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_LoginUI_single_basic_variant
  <<: *building_subspecs_lite

build_Networking_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Networking_single_basic_variant
  <<: *building_subspecs_lite

build_ObfuscatedConstants_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_ObfuscatedConstants_single_basic_variant
  <<: *building_subspecs_lite

build_OpenPGP_single_basic_variant:
  script:
    - fastlane build_OpenPGP_single_basic_variant
  <<: *building_subspecs_lite

build_Payments_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Payments_single_basic_variant
  <<: *building_subspecs_lite

build_PaymentsUI_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_PaymentsUI_single_basic_variant
  <<: *building_subspecs_lite

build_QuarkCommands_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_QuarkCommands_single_basic_variant
  <<: *building_subspecs_lite

build_TroubleShooting_single_basic_variant:
  script:
    - fastlane build_TroubleShooting_single_basic_variant
  <<: *building_subspecs_lite

build_Services_single_basic_variant:
  before_script:
    - bash scripts/generate_obfuscated_constants.sh
  script:
    - fastlane build_Services_single_basic_variant
  <<: *building_subspecs_lite

build_Settings_single_basic_variant:
  script:
    - fastlane build_Settings_single_basic_variant
  <<: *building_subspecs_lite

build_UIFoundations_single_basic_variant:
  script:
    - fastlane build_UIFoundations_single_basic_variant
  <<: *building_subspecs_lite

build_Utilities_single_basic_variant:
  script:
    - fastlane build_Utilities_single_basic_variant
  <<: *building_subspecs_lite

build_VCard_single_basic_variant:
  script:
    - fastlane build_VCard_single_basic_variant
  <<: *building_subspecs_lite

build_Observability_single_basic_variant:
  script:
    - fastlane build_Observability_single_basic_variant
  <<: *building_subspecs_lite
  
### create pod build single variant place holder

#
# --- UI tests related tasks ---
#

deploy:review:
  needs: []
  interruptible: false
  retry: 1
  environment:
    name: $CI_COMMIT_REF_NAME/$CI_PIPELINE_IID
    url: https://$DYNAMIC_DOMAIN
    on_stop: cleanup:review
    auto_stop_in: 1 day
  rules: &rules_deploy_cleanup
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never

# ui tests smoke is run on merge to develop
ui_testing_smoke:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never
  script:
    - bash scripts/run_ui_tests_on_ci.sh --smoke
  <<: &ui_testing_common_configuration
    stage: ui_testing
    allow_failure: false
    interruptible: true
    needs:
      - job: linting
        artifacts: false
      - job: deploy:review
        artifacts: true
    variables:
      GIT_STRATEGY: clone
      GIT_DEPTH: 0
    artifacts:
      when: always
      name: "test-report-$CI_PIPELINE_IID"
      paths:
        - UITestsResults-${CI_PIPELINE_IID}.html
      expire_in: 20 days
    before_script:
      - rm -rf ../pmconstants
      - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
    after_script:
      - rm -rf ~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/
    tags:
      - macstadium-m1-protoncore

# ui tests regression is run only on schedules
ui_testing_regression:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never
  timeout: 3 hours 30 minutes
  script:
    - bash scripts/run_ui_tests_on_ci.sh --regression
  <<: *ui_testing_common_configuration

cleanup:review:
  needs:
    - job: deploy:review
      artifacts: true
    - job: ui_testing_smoke
      artifacts: false
      optional: true
    - job: ui_testing_regression
      artifacts: false
      optional: true
  environment:
    name: $CI_COMMIT_REF_NAME/$CI_PIPELINE_IID
    action: stop
  interruptible: false
  rules: *rules_deploy_cleanup

#
# --- Translation related tasks ---
#

i18n-sync-crowdin:
  stage: i18n
  needs: []
  variables:
    I18N_SYNC_CROWDIN_PROJECT: "apple-core"
  extends: .i18n-sync-crowdin-shared-apple
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "web"'
  #     when: manual
  tags:
    - macstadium-intel-protoncore

i18n-commit-locales:
  stage: i18n
  needs: []
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: "apple-core"
  extends: .i18n-commit-locales-shared-apple
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "web"'
  #     when: manual
  tags:
    - macstadium-intel-protoncore
