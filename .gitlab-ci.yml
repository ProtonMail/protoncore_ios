include:
  - project: "proton/devops/atlas-deploy"
    ref: main
    file: "/scenarios/pipeline-env.yml"

stages:
  - release_tagging_and_publishing
  - mirror_main_to_github
  - mirror_develop_to_github
  - linting
  - preparing_environment
  - unit_testing
  - building_subspecs
  - deploy
  - ui_testing
  - cleanup

variables:
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  GEM_HOME: "$CI_PROJECT_DIR/gem"
  ATLAS_DEPLOY_SCOPE: "qa-iOS-auto"
  ATLAS_DEPLOY_LIST: ""

release_tagging_and_publishing:
  stage: release_tagging_and_publishing
  needs: []
  artifacts:
    when: always
    name: "ReleaseNotes-$CI_COMMIT_SHA"
    paths:
      - ReleaseNotes.md
    expire_in: never
  script:
    - git remote set-url origin https://protoncore:$PROTONCORE_ACCESS_TOKEN@${PROTON_GIT_URL}/apple/shared/protoncore.git
    - git remote -v
    - bash scripts/make_release_tags.sh
    - bash scripts/generate_and_publish_release_notes.sh
  <<: &release_jobs
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "main"'
        when: always
      - if: "$CI_COMMIT_BRANCH"
        when: never
    allow_failure: false
    interruptible: false
    variables:
      GIT_STRATEGY: clone
    tags:
      - iOS-cloud

mirror_main_to_github:
  stage: mirror_main_to_github
  needs:
    - job: release_tagging_and_publishing
      artifacts: false
  script:
    - bash scripts/mirror_to_github.sh main
  <<: *release_jobs

mirror_develop_to_github:
  stage: mirror_develop_to_github
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: "$CI_COMMIT_BRANCH"
      when: never
  allow_failure: false
  interruptible: false
  needs: []
  variables:
    GIT_STRATEGY: clone
  script:
    - bash scripts/mirror_to_github.sh develop
  tags:
    - iOS-cloud

linting:
  stage: linting
  script: tools/portable_swiftlint/swiftlint --config .swiftlint.yml --reporter junit > swiftlint.xml
  rules: &rules_commit_and_mr
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_BRANCH"
  needs: []
  allow_failure: false
  interruptible: true
  artifacts:
    name: "ios-lint-$CI_COMMIT_SHA"
    paths:
      - swiftlint.xml
    reports:
      junit:
        - swiftlint.xml
    expire_in: 90 days
  tags:
    - iOS-cloud

preparing_environment:
  dependencies: []
  stage: preparing_environment
  script:
    - rm -rf ../pmconstants
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${PROTON_GIT_URL}/apple/shared/pmconstants ../pmconstants
    - pod repo update
  tags:
    - iOS-cloud
  allow_failure: false
  interruptible: true
  needs:
    - job: linting
      artifacts: false
  rules: *rules_commit_and_mr

building_subspecs_full_1:
  script:
    - fastlane ios lint_subspecs_full_1
  <<: &building_subspecs_full
    dependencies: []
    stage: building_subspecs
    retry: 1
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "main"'
        when: never
      - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
        when: never
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      - if: "$CI_COMMIT_BRANCH"
        when: never
    allow_failure: false
    interruptible: true
    needs:
      - job: unit_testing
        artifacts: false
    tags:
      - iOS-cloud

building_subspecs_full_2:
  script:
    - fastlane ios lint_subspecs_full_2
  <<: *building_subspecs_full

building_subspecs_full_3:
  script:
    - fastlane ios lint_subspecs_full_3
  <<: *building_subspecs_full

building_subspecs_full_4:
  script:
    - fastlane ios lint_subspecs_full_4
  <<: *building_subspecs_full

building_subspecs_full_5:
  script:
    - fastlane ios lint_subspecs_full_5
  <<: *building_subspecs_full

building_subspecs_lite_1:
  script:
    - fastlane ios lint_subspecs_lite_1
  <<: &building_subspecs_lite
    dependencies: []
    stage: building_subspecs
    retry: 1
    rules:
      - if: '$CI_PIPELINE_SOURCE == "web"'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "main"'
        when: never
      - if: '$CI_COMMIT_BRANCH == "develop"'
        when: never
      - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
        when: never
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: never
      - if: "$CI_COMMIT_BRANCH"
    allow_failure: false
    interruptible: true
    needs:
      - job: unit_testing
        artifacts: false
    tags:
      - iOS-cloud

building_subspecs_lite_2:
  script:
    - fastlane ios lint_subspecs_lite_2
  <<: *building_subspecs_lite

building_subspecs_lite_3:
  script:
    - fastlane ios lint_subspecs_lite_3
  <<: *building_subspecs_lite

building_subspecs_lite_4:
  script:
    - fastlane ios lint_subspecs_lite_4
  <<: *building_subspecs_lite

building_subspecs_lite_5:
  script:
    - fastlane ios lint_subspecs_lite_5
  <<: *building_subspecs_lite

unit_testing:
  dependencies: []
  stage: unit_testing
  retry: 2
  rules: *rules_commit_and_mr
  allow_failure: false
  interruptible: true
  needs:
    - job: preparing_environment
      artifacts: false
  script:
    - fastlane test
    - fastlane/print-coverage.sh fastlane/test_output/PMAuthentication.test_result/3_Test/action.xccovreport
  after_script:
    - rm -rf ~/ProtonCore/UnitTests/$CI_PIPELINE_IID/DerivedData/
  artifacts:
    name: "ios-tests-$CI_COMMIT_SHA"
    when: always
    paths:
      - fastlane/test_output/
    expire_in: 3 days
    reports:
      junit:
        - fastlane/test_output/report.junit
  tags:
    - iOS-cloud

deploy:review:
  needs: []
  interruptible: false
  retry: 1
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never

ui_testing:
  stage: ui_testing
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never
  allow_failure: false
  interruptible: true
  needs:
    - job: preparing_environment
      artifacts: false
    - job: deploy:review
      artifacts: true
  artifacts:
    when: always
    name: "test-report-$CI_COMMIT_SHA"
    paths:
      - UITestsResult.xcresult
    expire_in: 20 days
  script:
    - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field
    - mkdir -p ~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/
    - echo "~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/"
    - echo "DYNAMIC_DOMAIN=${DYNAMIC_DOMAIN}"
    - xcodebuild -workspace example-app/ExampleApp.xcworkspace -scheme Example-UITests -destination "platform=iOS Simulator,name=iPhone 11,OS=15.0" -resultBundlePath "UITestResults" -derivedDataPath "~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/" -parallel-testing-enabled YES -parallel-testing-worker-count "4" -quiet test DYNAMIC_DOMAIN="${DYNAMIC_DOMAIN}"
  after_script:
    - rm -rf ~/ProtonCore/UITests/${CI_PIPELINE_IID}/DerivedData/
  tags:
    - iOS-cloud

cleanup:review:
  needs:
    - job: deploy:review
      artifacts: true
    - job: ui_testing
      artifacts: false
  interruptible: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_PIPELINE_SOURCE'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: never

cleanup:review:manual:
  stage: cleanup
  extends: cleanup:review
  needs:
    - job: deploy:review
      artifacts: true
  interruptible: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_BRANCH'
      when: never
    - if: '$CI_PIPELINE_SOURCE'
      when: never
